import re
from CalTools.GetValues import get_pos_via_bin_search, get_line_value


def get_fb_list():
    st = """
        500 1.2985(-9) 
    550 1.3491(-8) 
    600 9.2921(-8) 
    650 4.6733(-7) 
    700 1.8384(-6)
    750 5.9480(-6) 
    800 1.6433(-5)  
    850 3.9897(-5) 
    900 8.7020(-5) 
    950 1.7352(-4)
    1000 3.2075(-4) 
    1050 5.5581(-4) 
    1100 9.1117(-4) 
    1150 1.4238(-3) 
    1200 2.1341(-3)
    1250 3.0841(-3) 
    1300 4.3162(-3) 
    1350 5.6719(-3) 
    1400 7.7900(-3) 
    1450 1.0106(-2)
    1500 1.2850(-2) 
    1550 1.6047(-2) 
    1600 1.9718(-2) 
    1650 2.3878(-2) 
    1700 2.8533(-2)
    1750 3.3688(-2) 
    1800 3.9341(-2) 
    1850 4.5484(-2) 
    1900 5.2107(-2) 
    1950 5.9194(-2)
    2000 6.6728(-2) 
    2050 7.4688(-2) 
    2100 8.3051(-2) 
    2150 9.1793(-2) 
    2200 1.0089(-1)
    2250 1.1031(-1) 
    2300 1.2003(-1) 
    2350 1.3002(-1) 
    2400 1.4025(-1) 
    2450 1.5071(-1)
    2500 1.6135(-1) 
    2550 1.7216(-1) 
    2600 1.8312(-1) 
    2650 1.9419(-1) 
    2700 2.0535(-1)
    2750 2.1659(- 1) 
    2800 2.2789(- 1) 
    2850 2.3921(- 1) 
    2900 2.5056(- 1) 
    2950 2.6190(- 1)
    3000 2.7322(- 1) 
    3050 2.8452(- 1) 
    3100 2.9577(- 1) 
    3150 3.0697(- 1) 
    3200 3.1809(- 1)
    3250 3.2914(- 1) 
    3300 3.4010(- 1) 
    3350 3.5096(- 1) 
    3400 3.6172(- 1) 
    3450 3.7237(- 1)
    3500 3.8290(- 1) 
    3550 3.9331(- 1) 
    3600 4.0359(- 1) 
    3650 4.1374(- 1)  
    3700 4.2376(- 1)
    3750 4.3363(- 1) 
    3800 4.4337(- 1)  
    3850 4.5296(- 1) 
    3900 4.6241(- 1) 
    3950 4.7171(- 1)
    4000 4.8086(- 1) 
    4050 4.8987(- 1)  
    4100 4.9872(- 1) 
    4150 5.0743(- 1) 
    4200 5.1600(- 1)
    4250 5.2441(- 1) 
    4300 5.3268(- 1) 
    4350 5.4080(- 1) 
    4400 5.4878(- 1) 
    4450 5.5661(- 1)
    4500 5.6430(- 1) 
    4550 5.7185(- 1) 
    4600 5.7926(- 1) 
    4650 5.8653(- 1) 
    4700 5.9367(- 1)
    4750 6.0067(- 1) 
    4800 6.0754(- 1) 
    4850 6.1427(- 1) 
    4900 6.2088(- 1) 
    4950 6.2756(- 1)
    5000 6.3372(- 1) 
    5100 6.4607(- 1)  
    5200 6.5794(- 1) 
    5300 6.6936(- 1) 
    5400 6.8033(- 1)
    5500 6.9088(-1) 
    5600 7.0102(- 1) 
    5700 7.1076(- 1) 
    5800 7.2013(-1) 
    5900 7.2913(- 1)
    6000 7.3779(- 1) 
    6100 7.4611(- 1) 
    6200 7.5411(- 1) 
    6300 7.6180(- 1) 
    6400 7.6920(- 1)
    6500 7.7632(- 1) 
    6600 7.8316(- 1)
    6700 7.8975(- 1) 
    6800 7.9609(- 1) 
    6900 8.0220(- 1)
    7000 8.0807(- 1) 
    7200 8.1918(- 1) 
    7400 8.2949(- 1) 
    7600 8.3906(- 1) 
    7800 8.4797(-1)
    8000 8.5625(- 1) 
    8200 8.6396(- 1) 
    8400 8.7115(- 1) 
    8600 8.7786(- 1) 
    8800 8.8413(- 1)
    9000 8.8999(- 1) 
    9200 8.9547( -1) 
    9400 9.0060(- 1) 
    9600 9.0541(- 1) 
    9800 9.0992(- 1)
    10000 9.1416(- 1) 
    11000 9.3185(- 1) 
    12000 9.4505(- 1) 
    13000 9.5509(- 1) 
    14000 9.6285(- 1)
    15000 9.6893(- 1) 
    16000 9.7377(- 1) 
    17000 9.7765(- 1)  
    16000 9.8081(- 1) 
    19000 9.8341(-1)
    20000 9.8555(- 1) 
    21000 9.8735(- 1) 
    22000 9.8886(- 1) 
    23000 9.9014(- 1) 
    24000 9.9123(- 1)
    25000 9.9217(- 1) 
    26000 9.9297(- 1) 
    27000 9.9367(- 1) 
    28000 9.9429(- 1) 
    29000 9.9482(- 1)
    30000 9.9529(- 1) 
    35000 9.9695(- 1) 
    40000 9.9792(- 1) 
    45000 9.9851(- 1) 
    50000 9.9890(- 1)
    55000 9.9917(- 1) 
    60000 9.9935(- 1) 
    65000 9.9949(- 1) 
    70000 9.9959(- 1) 
    75000 9.9966(- 1)
    80000 9.9972(- 1) 
    85000 9.9977(- 1) 
    90000 9.9981(- 1) 
    95000 9.9984(- 1) 
    100000 9.9986(-1)
    """
    li = [i.strip() for i in st.split('\n') if i.strip()]
    umk_list, fb_list = [], []
    for i in li:
        zu = re.search('^(\d+).*(\d\.\d+).*\(.*(\d).*\)', i.strip())
        umk_list.append(float(zu.group(1)))
        fbi = float(zu.group(2) + 'e-' + zu.group(3))
        fb_list.append(fbi)
    return umk_list, fb_list


# 计算黑体相对波段辐射力
# 温度Tk单位K，波长n单位um，波长与温度的乘积umk单位um*K
def cal_fb(Tk, n, umk=0):
    umk_list = [500.0, 550.0, 600.0, 650.0, 700.0, 750.0, 800.0, 850.0, 900.0, 950.0, 1000.0, 1050.0, 1100.0, 1150.0,
                1200.0, 1250.0, 1300.0, 1350.0, 1400.0, 1450.0, 1500.0, 1550.0, 1600.0, 1650.0, 1700.0, 1750.0, 1800.0,
                1850.0, 1900.0, 1950.0, 2000.0, 2050.0, 2100.0, 2150.0, 2200.0, 2250.0, 2300.0, 2350.0, 2400.0, 2450.0,
                2500.0, 2550.0, 2600.0, 2650.0, 2700.0, 2750.0, 2800.0, 2850.0, 2900.0, 2950.0, 3000.0, 3050.0, 3100.0,
                3150.0, 3200.0, 3250.0, 3300.0, 3350.0, 3400.0, 3450.0, 3500.0, 3550.0, 3600.0, 3650.0, 3700.0, 3750.0,
                3800.0, 3850.0, 3900.0, 3950.0, 4000.0, 4050.0, 4100.0, 4150.0, 4200.0, 4250.0, 4300.0, 4350.0, 4400.0,
                4450.0, 4500.0, 4550.0, 4600.0, 4650.0, 4700.0, 4750.0, 4800.0, 4850.0, 4900.0, 4950.0, 5000.0, 5100.0,
                5200.0, 5300.0, 5400.0, 5500.0, 5600.0, 5700.0, 5800.0, 5900.0, 6000.0, 6100.0, 6200.0, 6300.0, 6400.0,
                6500.0, 6600.0, 6700.0, 6800.0, 6900.0, 7000.0, 7200.0, 7400.0, 7600.0, 7800.0, 8000.0, 8200.0, 8400.0,
                8600.0, 8800.0, 9000.0, 9200.0, 9400.0, 9600.0, 9800.0, 10000.0, 11000.0, 12000.0, 13000.0, 14000.0,
                15000.0, 16000.0, 17000.0, 16000.0, 19000.0, 20000.0, 21000.0, 22000.0, 23000.0, 24000.0, 25000.0,
                26000.0, 27000.0, 28000.0, 29000.0, 30000.0, 35000.0, 40000.0, 45000.0, 50000.0, 55000.0, 60000.0,
                65000.0, 70000.0, 75000.0, 80000.0, 85000.0, 90000.0, 95000.0, 100000.0]
    fb_list = [1.2985e-09, 1.3491e-08, 9.2921e-08, 4.6733e-07, 1.8384e-06, 5.948e-06, 1.6433e-05, 3.9897e-05,
               8.702e-05, 0.00017352, 0.00032075, 0.00055581, 0.00091117, 0.0014238, 0.0021341, 0.0030841,
               0.0043162, 0.0056719, 0.00779, 0.010106, 0.01285, 0.016047, 0.019718, 0.023878, 0.028533,
               0.033688, 0.039341, 0.045484, 0.052107, 0.059194, 0.066728, 0.074688, 0.083051, 0.091793,
               0.10089, 0.11031, 0.12003, 0.13002, 0.14025, 0.15071, 0.16135, 0.17216, 0.18312, 0.19419,
               0.20535, 0.21659, 0.22789, 0.23921, 0.25056, 0.2619, 0.27322, 0.28452, 0.29577, 0.30697, 0.31809,
               0.32914, 0.3401, 0.35096, 0.36172, 0.37237, 0.3829, 0.39331, 0.40359, 0.41374, 0.42376, 0.43363,
               0.44337, 0.45296, 0.46241, 0.47171, 0.48086, 0.48987, 0.49872, 0.50743, 0.516, 0.52441, 0.53268,
               0.5408, 0.54878, 0.55661, 0.5643, 0.57185, 0.57926, 0.58653, 0.59367, 0.60067, 0.60754, 0.61427,
               0.62088, 0.62756, 0.63372, 0.64607, 0.65794, 0.66936, 0.68033, 0.69088, 0.70102, 0.71076, 0.72013,
               0.72913, 0.73779, 0.74611, 0.75411, 0.7618, 0.7692, 0.77632, 0.78316, 0.78975, 0.79609, 0.8022,
               0.80807, 0.81918, 0.82949, 0.83906, 0.84797, 0.85625, 0.86396, 0.87115, 0.87786, 0.88413, 0.88999,
               0.89547, 0.9006, 0.90541, 0.90992, 0.91416, 0.93185, 0.94505, 0.95509, 0.96285, 0.96893, 0.97377,
               0.97765, 0.98081, 0.98341, 0.98555, 0.98735, 0.98886, 0.99014, 0.99123, 0.99217, 0.99297, 0.99367,
               0.99429, 0.99482, 0.99529, 0.99695, 0.99792, 0.99851, 0.9989, 0.99917, 0.99935, 0.99949, 0.99959,
               0.99966, 0.99972, 0.99977, 0.99981, 0.99984, 0.99986]
    if not umk:
        umk = float(Tk * n)
    if umk < umk_list[0]:
        return 0
    if umk > umk_list[-1]:
        return 1

    pos = get_pos_via_bin_search(umk_list, umk)
    if pos == 159:
        return fb_list[-1]
    return get_line_value(umk, umk_list[pos], umk_list[pos + 1], fb_list[pos], fb_list[pos + 1])

    # for i, u in enumerate(umk_list):
    #     if umk == u:
    #         return fb_list[i]
    #     if u < umk < umk_list[i + 1]:
    #         p = (umk - u) / (umk_list[i + 1] - u)
    #         fb = p * (fb_list[i + 1] - fb_list[i]) + fb_list[i]
    #         return fb


def cal_fb_via_band(Tk, w1, w2):
    return cal_fb(Tk, w2) - cal_fb(Tk, w1)


if __name__ == '__main__':
    T = 1373
    waves = 1.92568
    print(cal_fb(T, waves))
